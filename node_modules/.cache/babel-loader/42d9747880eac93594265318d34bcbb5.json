{"ast":null,"code":"var _jsxFileName = \"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js\",\n    _s = $RefreshSig$();\n\nimport \"./TypingArea.css\"; // variables\n\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport { TypingInfo, Timer, includesBadKey, returnNewTypingInfo } from \"../assets/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TypingArea(_ref) {\n  _s();\n\n  let {\n    lessonNum\n  } = _ref;\n  // constants\n  const NUM_WQRDS = 1; // creating the text area\n\n  function rmStringDuplicates(str) {\n    return Array.from(new Set(str)).join(\"\");\n  }\n\n  let chars = charBank[lessonNum];\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function cText(chars, numWords) {\n    let lst = [];\n    let i, j, text;\n\n    for (j = 0; j < numWords; j++) {\n      text = \"\";\n\n      for (i = 0; i < randomInt(3, 5); i++) {\n        let upperCase = Math.random() > 0.5 ? 1 : 0;\n        let newChar = chars.charAt(Math.floor(Math.random() * chars.length));\n        text += upperCase ? newChar.toUpperCase() : newChar;\n      }\n\n      lst.push(text);\n    }\n\n    return lst.join(\" \");\n  }\n\n  function createTypingText(chars, numWords) {\n    return cText(chars, numWords);\n  } // tracking typing\n\n\n  let text;\n\n  if (!text) {\n    text = createTypingText(chars, NUM_WQRDS);\n  }\n\n  let [typingInfo, setTypingInfo] = useState(new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer()));\n  console.log(\"outside\");\n  console.log(typingInfo);\n  useLayoutEffect(() => {\n    text = createTypingText(chars, NUM_WQRDS);\n    setTypingInfo(new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer()));\n    console.log(text);\n    console.log(typingInfo);\n  }, [lessonNum]);\n\n  function keyDownE() {\n    console.log(\"doesn't workd\");\n  }\n\n  useLayoutEffect(() => {}, [lessonNum]); //  ending control\n\n  let [finished, setFinished] = useState(false);\n\n  function triggerEnd() {\n    setFinished(true);\n  }\n\n  let typingBody = finished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [\"YOU FINISHED IN \", typingInfo.timer.timeElapsed, \" SECONDS WITH\", \" \", typingInfo.mistakes, \" MISTAKES \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 48\n      }, this), \"WPM:\", \" \", Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), \"ACCURACY:\", \" \", Math.round(Math.max((typingInfo.typed.length - typingInfo.mistakes) / typingInfo.typed.length, 0.01) * 100), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \" please type what you see below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"typing-container\",\n      className: \"typing\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typed typing-content\",\n        children: typingInfo.typed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toType  typing-content\",\n        children: typingInfo.toType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true); // restarting the texting\n\n  function restartTyping() {\n    window.location.reload(false);\n  } // Add event listeners\n\n\n  useLayoutEffect(() => {\n    window.addEventListener(\"keydown\", keyDownE); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownE);\n    };\n  }, [lessonNum]); // Empty array ensures that effect is only run on mount and unmount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-area\",\n    children: [typingBody, /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: restartTyping,\n      className: \"bottom-button\",\n      children: \"RESTART\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TypingArea, \"leM4wzuyYvOon02TIoDcdWG8aMs=\");\n\n_c = TypingArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingArea\");","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js"],"names":["charBank","useState","useEffect","useLayoutEffect","TypingInfo","Timer","includesBadKey","returnNewTypingInfo","TypingArea","lessonNum","NUM_WQRDS","rmStringDuplicates","str","Array","from","Set","join","chars","randomInt","min","max","Math","floor","random","cText","numWords","lst","i","j","text","upperCase","newChar","charAt","length","toUpperCase","push","createTypingText","typingInfo","setTypingInfo","console","log","keyDownE","finished","setFinished","triggerEnd","typingBody","timer","timeElapsed","mistakes","round","typed","toType","restartTyping","window","location","reload","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import \"./TypingArea.css\";\n\n// variables\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport {\n    TypingInfo,\n    Timer,\n    includesBadKey,\n    returnNewTypingInfo,\n} from \"../assets/typing\";\n\nexport default function TypingArea({ lessonNum }) {\n    // constants\n    const NUM_WQRDS = 1;\n    // creating the text area\n    function rmStringDuplicates(str) {\n        return Array.from(new Set(str)).join(\"\");\n    }\n    let chars = charBank[lessonNum];\n    function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    function cText(chars, numWords) {\n        let lst = [];\n        let i, j, text;\n        for (j = 0; j < numWords; j++) {\n            text = \"\";\n            for (i = 0; i < randomInt(3, 5); i++) {\n                let upperCase = Math.random() > 0.5 ? 1 : 0;\n                let newChar = chars.charAt(\n                    Math.floor(Math.random() * chars.length)\n                );\n\n                text += upperCase ? newChar.toUpperCase() : newChar;\n            }\n            lst.push(text);\n        }\n\n        return lst.join(\" \");\n    }\n\n    function createTypingText(chars, numWords) {\n        return cText(chars, numWords);\n    }\n\n    // tracking typing\n    let text;\n    if (!text) {\n        text = createTypingText(chars, NUM_WQRDS);\n    }\n\n    let [typingInfo, setTypingInfo] = useState(\n        new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer())\n    );\n    console.log(\"outside\");\n    console.log(typingInfo);\n\n    useLayoutEffect(() => {\n        text = createTypingText(chars, NUM_WQRDS);\n        setTypingInfo(\n            new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer())\n        );\n        console.log(text);\n        console.log(typingInfo);\n    }, [lessonNum]);\n\n    function keyDownE() {\n        console.log(\"doesn't workd\");\n    }\n    useLayoutEffect(() => {\n\n    }, [lessonNum]);\n\n    //  ending control\n    let [finished, setFinished] = useState(false);\n    function triggerEnd() {\n        setFinished(true);\n    }\n    let typingBody = finished ? (\n        <>\n            <div className=\"stats\">\n                YOU FINISHED IN {typingInfo.timer.timeElapsed} SECONDS WITH{\" \"}\n                {typingInfo.mistakes} MISTAKES <br />\n                WPM:{\" \"}\n                {Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60))}\n                <br />\n                ACCURACY:{\" \"}\n                {Math.round(\n                    Math.max(\n                        (typingInfo.typed.length - typingInfo.mistakes) /\n                            typingInfo.typed.length,\n                        0.01\n                    ) * 100\n                )}\n                %\n            </div>\n        </>\n    ) : (\n        <>\n            <div className=\"title\"> please type what you see below</div>\n            <div id=\"typing-container\" className=\"typing\">\n                <div className=\"typed typing-content\">{typingInfo.typed}</div>\n                <div className=\"toType  typing-content\">\n                    {typingInfo.toType}\n                </div>\n            </div>\n        </>\n    );\n\n    // restarting the texting\n    function restartTyping() {\n        window.location.reload(false);\n    }\n\n    // Add event listeners\n    useLayoutEffect(() => {\n        window.addEventListener(\"keydown\", keyDownE);\n\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", keyDownE);\n        };\n    }, [lessonNum]); // Empty array ensures that effect is only run on mount and unmount\n\n    return (\n        <div className=\"exercise-area\">\n            {typingBody}\n            <div onClick={restartTyping} className=\"bottom-button\">\n                RESTART\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}