{"ast":null,"code":"var _jsxFileName = \"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js\",\n    _s = $RefreshSig$();\n\nimport \"./TypingArea.css\"; // variables\n\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport { TypingInfo, Timer, includesBadKey, returnNewTypingInfo } from \"../assets/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TypingArea(_ref) {\n  _s();\n\n  let {\n    lessonNum\n  } = _ref;\n\n  function createTypingText(chars, numWords) {\n    return cText(chars, numWords);\n  } // tracking typing\n\n\n  let text;\n\n  if (!text) {\n    text = createTypingText(chars, NUM_WQRDS);\n  }\n\n  let [typingInfo, setTypingInfo] = useState(new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer()));\n\n  function keyDownE(e) {\n    if (includesBadKey(e)) {\n      return;\n    }\n\n    typingInfo.registerKeydown(e); // WE NEEKJFALK;DJFALK;SJFL;DSAFJSAD;LOFJASDL;FJASD;L\n    // FALKDSFJKSDA;FJADSLK\n    //FASJKFLDSJF;LKASDJFLA;S\n    //ASDLKFJDSAL;FJSDAL;FJSDA/\n    //ASFDLKJDSFLKSADJ;FLKDSJ;FLAK\n\n    console.log(typingInfo); // create brand new class\n\n    let newTypingInfo = returnNewTypingInfo(typingInfo);\n    setTypingInfo(newTypingInfo);\n\n    if (typingInfo.toType.length === 0) {\n      window.removeEventListener(\"keydown\", keyDownE);\n      triggerEnd();\n    }\n  }\n\n  useLayoutEffect(() => {\n    text = createTypingText(chars, NUM_WQRDS);\n    setTypingInfo(new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer()));\n    console.log(text);\n    console.log(typingInfo);\n  }, [lessonNum]); //  ending control\n\n  let [finished, setFinished] = useState(false);\n\n  function triggerEnd() {\n    setFinished(true);\n  }\n\n  let typingBody = finished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [\"YOU FINISHED IN \", typingInfo.timer.timeElapsed, \" SECONDS WITH\", \" \", typingInfo.mistakes, \" MISTAKES \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 48\n      }, this), \"WPM:\", \" \", Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), \"ACCURACY:\", \" \", Math.round(Math.max((typingInfo.typed.length - typingInfo.mistakes) / typingInfo.typed.length, 0.01) * 100), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \" please type what you see below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"typing-container\",\n      className: \"typing\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typed typing-content\",\n        children: typingInfo.typed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toType  typing-content\",\n        children: typingInfo.toType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true); // restarting the texting\n\n  function restartTyping() {\n    window.location.reload(false);\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownE); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownE);\n    };\n  }, [lessonNum]); // Empty array ensures that effect is only run on mount and unmount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-area\",\n    children: [typingBody, /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: restartTyping,\n      className: \"bottom-button\",\n      children: \"RESTART\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TypingArea, \"+RUuIG+aiMiaYEVlexZRtuOiNZI=\");\n\n_c = TypingArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingArea\");","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js"],"names":["charBank","useState","useEffect","useLayoutEffect","TypingInfo","Timer","includesBadKey","returnNewTypingInfo","TypingArea","lessonNum","createTypingText","chars","numWords","cText","text","NUM_WQRDS","typingInfo","setTypingInfo","keyDownE","e","registerKeydown","console","log","newTypingInfo","toType","length","window","removeEventListener","triggerEnd","finished","setFinished","typingBody","timer","timeElapsed","mistakes","Math","round","max","typed","restartTyping","location","reload","addEventListener"],"mappings":"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","sourcesContent":["import \"./TypingArea.css\";\n\n// variables\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport {\n    TypingInfo,\n    Timer,\n    includesBadKey,\n    returnNewTypingInfo,\n} from \"../assets/typing\";\n\nexport default function TypingArea({ lessonNum }) {\n\n\n\n    function createTypingText(chars, numWords) {\n        return cText(chars, numWords);\n    }\n\n    // tracking typing\n    let text;\n    if (!text) {\n        text = createTypingText(chars, NUM_WQRDS);\n    }\n\n    let [typingInfo, setTypingInfo] = useState(\n        new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer())\n    );\n    function keyDownE(e) {\n        if (includesBadKey(e)) {\n            return;\n        }\n        typingInfo.registerKeydown(e);\n        // WE NEEKJFALK;DJFALK;SJFL;DSAFJSAD;LOFJASDL;FJASD;L\n        // FALKDSFJKSDA;FJADSLK\n        //FASJKFLDSJF;LKASDJFLA;S\n        //ASDLKFJDSAL;FJSDAL;FJSDA/\n        //ASFDLKJDSFLKSADJ;FLKDSJ;FLAK\n        console.log(typingInfo);\n        // create brand new class\n        let newTypingInfo = returnNewTypingInfo(typingInfo);\n        setTypingInfo(newTypingInfo);\n        if (typingInfo.toType.length === 0) {\n            window.removeEventListener(\"keydown\", keyDownE);\n            triggerEnd();\n        }\n    }\n\n    useLayoutEffect(() => {\n        text = createTypingText(chars, NUM_WQRDS);\n        setTypingInfo(\n            new TypingInfo(createTypingText(text, NUM_WQRDS), new Timer())\n        );\n\n        console.log(text);\n        console.log(typingInfo);\n    }, [lessonNum]);\n\n    //  ending control\n    let [finished, setFinished] = useState(false);\n    function triggerEnd() {\n        setFinished(true);\n    }\n    let typingBody = finished ? (\n        <>\n            <div className=\"stats\">\n                YOU FINISHED IN {typingInfo.timer.timeElapsed} SECONDS WITH{\" \"}\n                {typingInfo.mistakes} MISTAKES <br />\n                WPM:{\" \"}\n                {Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60))}\n                <br />\n                ACCURACY:{\" \"}\n                {Math.round(\n                    Math.max(\n                        (typingInfo.typed.length - typingInfo.mistakes) /\n                            typingInfo.typed.length,\n                        0.01\n                    ) * 100\n                )}\n                %\n            </div>\n        </>\n    ) : (\n        <>\n            <div className=\"title\"> please type what you see below</div>\n            <div id=\"typing-container\" className=\"typing\">\n                <div className=\"typed typing-content\">{typingInfo.typed}</div>\n                <div className=\"toType  typing-content\">\n                    {typingInfo.toType}\n                </div>\n            </div>\n        </>\n    );\n\n    // restarting the texting\n    function restartTyping() {\n        window.location.reload(false);\n    }\n\n    // Add event listeners\n    useEffect(() => {\n        window.addEventListener(\"keydown\", keyDownE);\n\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", keyDownE);\n        };\n    }, [lessonNum]); // Empty array ensures that effect is only run on mount and unmount\n\n    return (\n        <div className=\"exercise-area\">\n            {typingBody}\n            <div onClick={restartTyping} className=\"bottom-button\">\n                RESTART\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}