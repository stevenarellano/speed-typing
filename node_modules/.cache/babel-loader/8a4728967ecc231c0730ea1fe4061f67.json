{"ast":null,"code":"var _jsxFileName = \"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/TypingArea.js\",\n    _s = $RefreshSig$();\n\nimport \"./TypingArea.css\"; // variables\n\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport { TypingInfo, Timer, includesBadKey, returnNewTypingInfo } from \"../assets/typing\";\nimport { NUM_WQRDS } from \"../assets/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TypingArea(_ref) {\n  _s();\n\n  let {\n    lessonState,\n    typingInfoState,\n    restartState\n  } = _ref;\n  // imported states\n  let [lessonNum, setLessonNum] = lessonState;\n  let [typingInfo, setTypingInfo] = typingInfoState;\n  let [restartToggle, setRestartToggle] = restartState; //  ending control\n\n  let [finished, setFinished] = useState(false);\n\n  function triggerEnd() {\n    setFinished(true);\n  }\n\n  let typingBody = finished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \" STATS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stats\",\n      children: [\"Time Elapsed: \", typingInfo.timer.timeElapsed, \"s\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 62\n      }, this), \"MISTAKES MADE: \", typingInfo.mistakes, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), \"WPM:\", \" \", Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), \"ACCURACY:\", \" \", Math.round(Math.max((typingInfo.typed.length - typingInfo.mistakes) / typingInfo.typed.length, 0.01) * 100), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \" Please Type The Letters Below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"typing-container\",\n      className: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typed typing-content\",\n        children: typingInfo.typed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toType  typing-content\",\n        children: typingInfo.toType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true); // restarting the texting\n\n  function restartTyping() {\n    setLessonNum(lessonNum + 1 - 1);\n  }\n\n  function keyDownE(e) {\n    console.log(\"hi\");\n  } // Add event listeners\n\n\n  useLayoutEffect(() => {\n    keyDownE = function (e) {\n      if (includesBadKey(e)) {\n        return;\n      }\n\n      typingInfo.registerKeydown(e);\n      console.log(typingInfo); // create brand new class\n\n      let newTypingInfo = returnNewTypingInfo(typingInfo);\n      setTypingInfo(newTypingInfo);\n\n      if (typingInfo.toType.length === 0) {\n        window.removeEventListener(\"keydown\", keyDownE);\n        triggerEnd();\n      }\n    };\n\n    window.addEventListener(\"keydown\", keyDownE); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownE);\n    };\n  }, [lessonNum, typingInfo]); // Empty array ensures that effect is only run on mount and unmount\n\n  useLayoutEffect(() => {\n    setFinished(0);\n  }, [lessonNum]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"lesson-area\",\n    children: [typingBody, /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: restartTyping,\n      className: \"bottom-button\",\n      children: \"RESTART\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TypingArea, \"JuX78tLw6LcRWBuhTrO4rjWsimo=\");\n\n_c = TypingArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingArea\");","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/TypingArea.js"],"names":["charBank","useState","useEffect","useLayoutEffect","TypingInfo","Timer","includesBadKey","returnNewTypingInfo","NUM_WQRDS","TypingArea","lessonState","typingInfoState","restartState","lessonNum","setLessonNum","typingInfo","setTypingInfo","restartToggle","setRestartToggle","finished","setFinished","triggerEnd","typingBody","timer","timeElapsed","mistakes","Math","round","max","typed","length","toType","restartTyping","keyDownE","e","console","log","registerKeydown","newTypingInfo","window","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["import \"./TypingArea.css\";\n\n// variables\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport {\n    TypingInfo,\n    Timer,\n    includesBadKey,\n    returnNewTypingInfo,\n} from \"../assets/typing\";\nimport { NUM_WQRDS } from \"../assets/typing\";\n\nexport default function TypingArea({\n    lessonState,\n    typingInfoState,\n    restartState,\n}) {\n    // imported states\n    let [lessonNum, setLessonNum] = lessonState;\n    let [typingInfo, setTypingInfo] = typingInfoState;\n    let [restartToggle, setRestartToggle] = restartState;\n\n    //  ending control\n    let [finished, setFinished] = useState(false);\n    function triggerEnd() {\n        setFinished(true);\n    }\n    let typingBody = finished ? (\n        <>\n            <div className=\"title\"> STATS</div>\n            <div className=\"stats\">\n                Time Elapsed: {typingInfo.timer.timeElapsed}s<br />\n                MISTAKES MADE: {typingInfo.mistakes}\n                <br />\n                WPM:{\" \"}\n                {Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60))}\n                <br />\n                ACCURACY:{\" \"}\n                {Math.round(\n                    Math.max(\n                        (typingInfo.typed.length - typingInfo.mistakes) /\n                            typingInfo.typed.length,\n                        0.01\n                    ) * 100\n                )}\n                %\n            </div>\n        </>\n    ) : (\n        <>\n            <div className=\"title\"> Please Type The Letters Below</div>\n            <div id=\"typing-container\" className=\"\">\n                <div className=\"typed typing-content\">{typingInfo.typed}</div>\n                <div className=\"toType  typing-content\">\n                    {typingInfo.toType}\n                </div>\n            </div>\n        </>\n    );\n\n    // restarting the texting\n    function restartTyping() {\n        setLessonNum(lessonNum + 1 - 1);\n    }\n\n    function keyDownE(e) {\n        console.log(\"hi\");\n    }\n\n    // Add event listeners\n    useLayoutEffect(() => {\n        keyDownE = function (e) {\n            if (includesBadKey(e)) {\n                return;\n            }\n            typingInfo.registerKeydown(e);\n\n            console.log(typingInfo);\n            // create brand new class\n            let newTypingInfo = returnNewTypingInfo(typingInfo);\n            setTypingInfo(newTypingInfo);\n            if (typingInfo.toType.length === 0) {\n                window.removeEventListener(\"keydown\", keyDownE);\n                triggerEnd();\n            }\n        };\n        window.addEventListener(\"keydown\", keyDownE);\n\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", keyDownE);\n        };\n    }, [lessonNum, typingInfo]); // Empty array ensures that effect is only run on mount and unmount\n\n    useLayoutEffect(() => {\n        setFinished(0);\n    }, [lessonNum]);\n    return (\n        <div id=\"lesson-area\">\n            {typingBody}\n            <div onClick={restartTyping} className=\"bottom-button\">\n                RESTART\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}