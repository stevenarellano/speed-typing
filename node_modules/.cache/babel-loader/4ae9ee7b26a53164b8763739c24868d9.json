{"ast":null,"code":"// constants\nexport const NUM_WQRDS = 40; // creating the text area\n\nfunction rmStringDuplicates(str) {\n  return Array.from(new Set(str)).join(\"\");\n}\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function cText(chars, numWords) {\n  let lst = [];\n  let i, j, text;\n\n  for (j = 0; j < numWords; j++) {\n    text = \"\";\n\n    for (i = 0; i < randomInt(3, 5); i++) {\n      let upperCase = Math.random() > 0.9 ? 1 : 0;\n      let newChar = chars.charAt(Math.floor(Math.random() * chars.length));\n      text += upperCase ? newChar.toUpperCase() : newChar;\n    }\n\n    lst.push(text);\n  }\n\n  return lst.join(\" \");\n}\n\nclass TypingInfo {\n  constructor(toType, timer) {\n    this.toType = toType;\n    this.timer = timer;\n    this.typed = \"\";\n    this.mistakes = 0;\n    this.currentWrong = false;\n  }\n\n  _getNextToType() {\n    let nextToType;\n\n    if (this.toType.length > 0) {\n      nextToType = this.toType.substring(1);\n    } else {\n      nextToType = \"\";\n    }\n\n    this.toType = nextToType;\n    return nextToType;\n  }\n\n  _timerControl(toType) {\n    if (this.typed.length == 0) {\n      this.timer.startTimer();\n    } else if (toType.length == 0) {\n      this.timer.endTimer();\n    }\n  }\n\n  _addWrongClass() {\n    let typingAreaClasses = document.getElementById(\"typing-container\").classList;\n\n    if (!typingAreaClasses.contains(\"wrong-keydown\")) {\n      typingAreaClasses.add(\"wrong-keydown\");\n      console.log(typingAreaClasses);\n    }\n  }\n\n  _removeWrongClass() {\n    let typingAreaClasses = document.getElementById(\"typing-container\").classList;\n\n    if (typingAreaClasses.contains(\"wrong-keydown\")) {\n      typingAreaClasses.remove(\"wrong-keydown\");\n    }\n  }\n\n  registerKeydown(e) {\n    let firstChar = this.toType.charAt(0);\n\n    if (e.key === firstChar) {\n      if (this.currentWrong) {\n        this.currentWrong = false;\n\n        this._removeWrongClass();\n      }\n\n      let nextToType = this._getNextToType();\n\n      this._timerControl(nextToType);\n\n      this.typed = this.typed + firstChar;\n    } else {\n      this.mistakes++;\n      this.currentWrong = true;\n\n      this._addWrongClass();\n    }\n  }\n\n}\n\nexport function returnNewTypingInfo(oldTypingInfo) {\n  let newTypingInfo = new TypingInfo(oldTypingInfo.toType, new Timer());\n  newTypingInfo.typed = oldTypingInfo.typed;\n  newTypingInfo.mistakes = oldTypingInfo.mistakes;\n  newTypingInfo.currentWrong = oldTypingInfo.currentWrong;\n  newTypingInfo.timer = oldTypingInfo.timer;\n  return newTypingInfo;\n}\n\nclass Timer {\n  constructor() {\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeElapsed = 0;\n  }\n\n  startTimer() {\n    this.startTime = new Date();\n  }\n\n  _secondsElapsed(time1, time2) {\n    return Math.abs(time1 - time2) / 1000;\n  }\n\n  endTimer() {\n    this.endTime = new Date();\n    this.timeElapsed = this._secondsElapsed(this.startTime, this.endTime);\n  }\n\n}\n\nconst noInputKeys = [\"Shift\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"Control\", \"Alt\", \"Meta\", \"Escape\", \"CapsLock\", \"Backspace\"];\n\nfunction includesBadKey(e) {\n  if (noInputKeys.includes(e.key)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/typing.js"],"names":["NUM_WQRDS","rmStringDuplicates","str","Array","from","Set","join","randomInt","min","max","Math","floor","random","cText","chars","numWords","lst","i","j","text","upperCase","newChar","charAt","length","toUpperCase","push","TypingInfo","constructor","toType","timer","typed","mistakes","currentWrong","_getNextToType","nextToType","substring","_timerControl","startTimer","endTimer","_addWrongClass","typingAreaClasses","document","getElementById","classList","contains","add","console","log","_removeWrongClass","remove","registerKeydown","e","firstChar","key","returnNewTypingInfo","oldTypingInfo","newTypingInfo","Timer","startTime","endTime","timeElapsed","Date","_secondsElapsed","time1","time2","abs","noInputKeys","includesBadKey","includes"],"mappings":"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","sourcesContent":["// constants\nexport const NUM_WQRDS = 40;\n// creating the text area\nfunction rmStringDuplicates(str) {\n    return Array.from(new Set(str)).join(\"\");\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function cText(chars, numWords) {\n    let lst = [];\n    let i, j, text;\n    for (j = 0; j < numWords; j++) {\n        text = \"\";\n        for (i = 0; i < randomInt(3, 5); i++) {\n            \n            let upperCase = Math.random() > 0.9 ? 1 : 0;\n            let newChar = chars.charAt(\n                Math.floor(Math.random() * chars.length)\n            );\n\n            text += upperCase ? newChar.toUpperCase() : newChar;\n        }\n        lst.push(text);\n    }\n\n    return lst.join(\" \");\n}\nclass TypingInfo {\n    constructor(toType, timer) {\n        this.toType = toType;\n        this.timer = timer;\n        this.typed = \"\";\n        this.mistakes = 0;\n        this.currentWrong = false;\n    }\n\n    _getNextToType() {\n        let nextToType;\n        if (this.toType.length > 0) {\n            nextToType = this.toType.substring(1);\n        } else {\n            nextToType = \"\";\n        }\n        this.toType = nextToType;\n        return nextToType;\n    }\n\n    _timerControl(toType) {\n        if (this.typed.length == 0) {\n            this.timer.startTimer();\n        } else if (toType.length == 0) {\n            this.timer.endTimer();\n        }\n    }\n\n    _addWrongClass() {\n        let typingAreaClasses =\n            document.getElementById(\"typing-container\").classList;\n        if (!typingAreaClasses.contains(\"wrong-keydown\")) {\n            typingAreaClasses.add(\"wrong-keydown\");\n            console.log(typingAreaClasses);\n        }\n    }\n\n    _removeWrongClass() {\n        let typingAreaClasses =\n            document.getElementById(\"typing-container\").classList;\n        if (typingAreaClasses.contains(\"wrong-keydown\")) {\n            typingAreaClasses.remove(\"wrong-keydown\");\n        }\n    }\n\n    registerKeydown(e) {\n        let firstChar = this.toType.charAt(0);\n        if (e.key === firstChar) {\n            if (this.currentWrong) {\n                this.currentWrong = false;\n                this._removeWrongClass();\n            }\n            let nextToType = this._getNextToType();\n            this._timerControl(nextToType);\n\n            this.typed = this.typed + firstChar;\n        } else {\n            this.mistakes++;\n            this.currentWrong = true;\n            this._addWrongClass();\n        }\n    }\n}\n\nexport function returnNewTypingInfo(oldTypingInfo) {\n    let newTypingInfo = new TypingInfo(oldTypingInfo.toType, new Timer());\n    newTypingInfo.typed = oldTypingInfo.typed;\n    newTypingInfo.mistakes = oldTypingInfo.mistakes;\n    newTypingInfo.currentWrong = oldTypingInfo.currentWrong;\n    newTypingInfo.timer = oldTypingInfo.timer;\n    return newTypingInfo;\n}\n\nclass Timer {\n    constructor() {\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeElapsed = 0;\n    }\n\n    startTimer() {\n        this.startTime = new Date();\n    }\n\n    _secondsElapsed(time1, time2) {\n        return Math.abs(time1 - time2) / 1000;\n    }\n\n    endTimer() {\n        this.endTime = new Date();\n        this.timeElapsed = this._secondsElapsed(this.startTime, this.endTime);\n    }\n}\n\nconst noInputKeys = [\n    \"Shift\",\n    \"ArrowDown\",\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"Control\",\n    \"Alt\",\n    \"Meta\",\n    \"Escape\",\n    \"CapsLock\",\n    \"Backspace\",\n];\n\nfunction includesBadKey(e) {\n    if (noInputKeys.includes(e.key)) {\n        return true;\n    }\n    return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };\n"]},"metadata":{},"sourceType":"module"}