{"ast":null,"code":"class TypingInfo {\n  constructor(toType, timer) {\n    let typed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    this.toType = toType;\n    this.timer = timer;\n    this.typed = typed;\n  }\n\n  RegisterKeydown(e) {\n    let firstChar = this.toType.charAt(0);\n\n    if (e.key === firstChar) {\n      let toTypeleft = '';\n\n      if (this.toType.length > 0) {\n        toTypeLeft = toType.substring(1);\n      }\n\n      let toTypeLeft = substring(1);\n      let newTypingInfo = new TypingInfo(this.toType.substring(1), this.timer, this.typed + firstChar);\n      return;\n    } else {\n      return toType;\n    }\n  }\n\n}\n\nclass Timer {\n  constructor() {\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeElapsed = 0;\n  }\n\n  startTimer() {\n    this.startTime = new Date();\n  }\n\n  endTimer() {\n    this.endTime = new Date();\n    this.timeElapsed = secondsElapsed(newStopwatch.startTime, newStopwatch.endTime);\n  }\n\n}\n\nfunction secondsElapsed(time1, time2) {\n  return Math.abs(time1 - time2) / 1000;\n}\n\nconst noInputKeys = [\"Shift\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"Control\", \"Alt\", \"Meta\", \"Escape\", \"CapsLock\", \"Backspace\"];\nexport function includesBadKey(e) {\n  if (noInputKeys.includes(e.key)) {\n    return true;\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/assets/typing.js"],"names":["TypingInfo","constructor","toType","timer","typed","RegisterKeydown","e","firstChar","charAt","key","toTypeleft","length","toTypeLeft","substring","newTypingInfo","Timer","startTime","endTime","timeElapsed","startTimer","Date","endTimer","secondsElapsed","newStopwatch","time1","time2","Math","abs","noInputKeys","includesBadKey","includes"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAA4B;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACnC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AAEDC,EAAAA,eAAe,CAACC,CAAD,EAAI;AACf,QAAIC,SAAS,GAAG,KAAKL,MAAL,CAAYM,MAAZ,CAAmB,CAAnB,CAAhB;;AACA,QAAIF,CAAC,CAACG,GAAF,KAAUF,SAAd,EAAyB;AACrB,UAAIG,UAAU,GAAG,EAAjB;;AACA,UAAI,KAAKR,MAAL,CAAYS,MAAZ,GAAqB,CAAzB,EAA4B;AACxBC,QAAAA,UAAU,GAAGV,MAAM,CAACW,SAAP,CAAiB,CAAjB,CAAb;AAEH;;AACD,UAAID,UAAU,GAAGC,SAAS,CAAC,CAAD,CAA1B;AACA,UAAIC,aAAa,GAAG,IAAId,UAAJ,CAChB,KAAKE,MAAL,CAAYW,SAAZ,CAAsB,CAAtB,CADgB,EAEhB,KAAKV,KAFW,EAGhB,KAAKC,KAAL,GAAaG,SAHG,CAApB;AAMA;AACH,KAdD,MAcO;AACH,aAAOL,MAAP;AACH;AACJ;;AA1BY;;AA6BjB,MAAMa,KAAN,CAAY;AACRd,EAAAA,WAAW,GAAG;AACV,SAAKe,SAAL,GAAiB,CAAjB;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,SAAKH,SAAL,GAAiB,IAAII,IAAJ,EAAjB;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,SAAKJ,OAAL,GAAe,IAAIG,IAAJ,EAAf;AACA,SAAKF,WAAL,GAAmBI,cAAc,CAC7BC,YAAY,CAACP,SADgB,EAE7BO,YAAY,CAACN,OAFgB,CAAjC;AAIH;;AAjBO;;AAoBZ,SAASK,cAAT,CAAwBE,KAAxB,EAA+BC,KAA/B,EAAsC;AAClC,SAAOC,IAAI,CAACC,GAAL,CAASH,KAAK,GAAGC,KAAjB,IAA0B,IAAjC;AACH;;AAED,MAAMG,WAAW,GAAG,CAChB,OADgB,EAEhB,WAFgB,EAGhB,SAHgB,EAIhB,WAJgB,EAKhB,YALgB,EAMhB,SANgB,EAOhB,KAPgB,EAQhB,MARgB,EAShB,QATgB,EAUhB,UAVgB,EAWhB,WAXgB,CAApB;AAcA,OAAO,SAASC,cAAT,CAAwBvB,CAAxB,EAA2B;AAC9B,MAAIsB,WAAW,CAACE,QAAZ,CAAqBxB,CAAC,CAACG,GAAvB,CAAJ,EAAiC;AAC7B,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH","sourcesContent":["class TypingInfo {\n    constructor(toType, timer, typed = \"\") {\n        this.toType = toType;\n        this.timer = timer;\n        this.typed = typed;\n    }\n\n    RegisterKeydown(e) {\n        let firstChar = this.toType.charAt(0);\n        if (e.key === firstChar) {\n            let toTypeleft = '';\n            if (this.toType.length > 0) {\n                toTypeLeft = toType.substring(1);\n                \n            }\n            let toTypeLeft = substring(1);\n            let newTypingInfo = new TypingInfo(\n                this.toType.substring(1),\n                this.timer,\n                this.typed + firstChar\n            );\n\n            return;\n        } else {\n            return toType;\n        }\n    }\n}\n\nclass Timer {\n    constructor() {\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeElapsed = 0;\n    }\n\n    startTimer() {\n        this.startTime = new Date();\n    }\n\n    endTimer() {\n        this.endTime = new Date();\n        this.timeElapsed = secondsElapsed(\n            newStopwatch.startTime,\n            newStopwatch.endTime\n        );\n    }\n}\n\nfunction secondsElapsed(time1, time2) {\n    return Math.abs(time1 - time2) / 1000;\n}\n\nconst noInputKeys = [\n    \"Shift\",\n    \"ArrowDown\",\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"Control\",\n    \"Alt\",\n    \"Meta\",\n    \"Escape\",\n    \"CapsLock\",\n    \"Backspace\",\n];\n\nexport function includesBadKey(e) {\n    if (noInputKeys.includes(e.key)) {\n        return true;\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"module"}