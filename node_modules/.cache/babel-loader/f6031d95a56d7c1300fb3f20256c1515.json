{"ast":null,"code":"var _jsxFileName = \"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js\",\n    _s = $RefreshSig$();\n\nimport \"./TypingArea.css\"; // variables\n\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect } from \"react\";\nimport { TypingInfo, Timer, includesBadKey } from \"../assets/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TypingArea(_ref) {\n  _s();\n\n  let {\n    lessonNum\n  } = _ref;\n  // constants\n  const NUM_WQRDS = 1; // creating the text area\n\n  function rmStringDuplicates(str) {\n    return Array.from(new Set(str)).join(\"\");\n  }\n\n  let chars = charBank[lessonNum];\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function cText(chars, numWords) {\n    let lst = [];\n    let i, j, text;\n\n    for (j = 0; j < numWords; j++) {\n      text = \"\";\n\n      for (i = 0; i < randomInt(3, 5); i++) {\n        let upperCase = Math.random() > 0.5 ? 1 : 0;\n        let newChar = chars.charAt(Math.floor(Math.random() * chars.length));\n        text += upperCase ? newChar.toUpperCase() : newChar;\n      }\n\n      lst.push(text);\n    }\n\n    return lst.join(\" \");\n  }\n\n  function createTypingText(chars, numWords) {\n    return cText(chars, numWords);\n  }\n\n  let text = createTypingText(chars, NUM_WQRDS); // tracking typing\n\n  let [typingInfo, setTypingInfo] = useState(new TypingInfo(text, new Timer()));\n\n  function keyDownE(e) {\n    if (includesBadKey(e)) {\n      return;\n    }\n\n    typingInfo.registerKeydown(e);\n    setTypingInfo({ ...typingInfo\n    });\n\n    if (typingInfo.toType.length === 0) {\n      window.removeEventListener(\"keydown\", keyDownE);\n      triggerEnd();\n    }\n  } //  ending control\n\n\n  let [finished, setFinished] = useState(false);\n\n  function triggerEnd() {\n    setFinished;\n    console.log(\"all done\");\n  }\n\n  let typingBody = finished ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: [\"YOU FINISHED IN \", typingInfo.timer.timeElapsed, \" SECONDS WITH\", \" \", typingInfo.mistakes, \" MISTAKES\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"typing-container\",\n      children: [\"WPM: \", NUM_WQRDS / (typingInfo.timer.timeElapsed / 60), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"ACCURACY:\", Math.round(Math.max((typingInfo.typed.length - typingInfo.mistakes) / typingInfo.typed.length, 0.01)), \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \" please type what you see below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"typing-container\",\n      className: \"typing wrong\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typed typing-content\",\n        children: typingInfo.typed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toType  typing-content\",\n        children: typingInfo.toType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true); // restarting the texting\n\n  function restartTyping() {\n    window.location.reload(false);\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownE); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", keyDownE);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"exercise-area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: \" please type what you see below\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"typing-container\",\n      className: \"typing wrong\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"typed typing-content\",\n        children: typingInfo.typed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"toType  typing-content\",\n        children: typingInfo.toType\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: restartTyping,\n      className: \"bottom-button\",\n      children: \"RESTART\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TypingArea, \"/MlB/olWJ3XMxDE+ow1gQcdX9e0=\");\n\n_c = TypingArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingArea\");","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js"],"names":["charBank","useState","useEffect","TypingInfo","Timer","includesBadKey","TypingArea","lessonNum","NUM_WQRDS","rmStringDuplicates","str","Array","from","Set","join","chars","randomInt","min","max","Math","floor","random","cText","numWords","lst","i","j","text","upperCase","newChar","charAt","length","toUpperCase","push","createTypingText","typingInfo","setTypingInfo","keyDownE","e","registerKeydown","toType","window","removeEventListener","triggerEnd","finished","setFinished","console","log","typingBody","timer","timeElapsed","mistakes","round","typed","restartTyping","location","reload","addEventListener"],"mappings":"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","sourcesContent":["import \"./TypingArea.css\";\n\n// variables\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect } from \"react\";\nimport { TypingInfo, Timer, includesBadKey } from \"../assets/typing\";\n\nexport default function TypingArea({ lessonNum }) {\n    // constants\n    const NUM_WQRDS = 1;\n\n    // creating the text area\n    function rmStringDuplicates(str) {\n        return Array.from(new Set(str)).join(\"\");\n    }\n    let chars = charBank[lessonNum];\n    function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    function cText(chars, numWords) {\n        let lst = [];\n        let i, j, text;\n        for (j = 0; j < numWords; j++) {\n            text = \"\";\n            for (i = 0; i < randomInt(3, 5); i++) {\n                let upperCase = Math.random() > 0.5 ? 1 : 0;\n                let newChar = chars.charAt(\n                    Math.floor(Math.random() * chars.length)\n                );\n\n                text += upperCase ? newChar.toUpperCase() : newChar;\n            }\n            lst.push(text);\n        }\n\n        return lst.join(\" \");\n    }\n\n    function createTypingText(chars, numWords) {\n        return cText(chars, numWords);\n    }\n    let text = createTypingText(chars, NUM_WQRDS);\n\n    // tracking typing\n\n    let [typingInfo, setTypingInfo] = useState(\n        new TypingInfo(text, new Timer())\n    );\n\n    function keyDownE(e) {\n        if (includesBadKey(e)) {\n            return;\n        }\n        typingInfo.registerKeydown(e);\n        setTypingInfo({ ...typingInfo });\n        if (typingInfo.toType.length === 0) {\n            window.removeEventListener(\"keydown\", keyDownE);\n            triggerEnd();\n        }\n    }\n\n    //  ending control\n    let [finished, setFinished] = useState(false);\n    function triggerEnd() {\n        setFinished\n        console.log(\"all done\");\n    }\n    let typingBody = finished ? (\n        <>\n            <div className=\"title\">\n                YOU FINISHED IN {typingInfo.timer.timeElapsed} SECONDS WITH{\" \"}\n                {typingInfo.mistakes} MISTAKES\n            </div>\n            <div className=\"typing-container\">\n                WPM: {NUM_WQRDS / (typingInfo.timer.timeElapsed / 60)}{\" \"}\n            </div>\n            <div>\n                ACCURACY:\n                {Math.round(\n                    Math.max(\n                        (typingInfo.typed.length - typingInfo.mistakes) /\n                            typingInfo.typed.length,\n                        0.01\n                    )\n                )}\n                %\n            </div>\n        </>\n    ) : (\n        <>\n            <div className=\"title\"> please type what you see below</div>\n            <div id=\"typing-container\" className=\"typing wrong\">\n                <div className=\"typed typing-content\">{typingInfo.typed}</div>\n                <div className=\"toType  typing-content\">\n                    {typingInfo.toType}\n                </div>\n            </div>\n        </>\n    );\n\n    // restarting the texting\n    function restartTyping() {\n        window.location.reload(false);\n    }\n\n    // Add event listeners\n    useEffect(() => {\n        window.addEventListener(\"keydown\", keyDownE);\n\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", keyDownE);\n        };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return (\n        <div className=\"exercise-area\">\n            <div className=\"title\"> please type what you see below</div>\n            <div id=\"typing-container\" className=\"typing wrong\">\n                <div className=\"typed typing-content\">{typingInfo.typed}</div>\n                <div className=\"toType  typing-content\">\n                    {typingInfo.toType}\n                </div>\n            </div>\n            <div onClick={restartTyping} className=\"bottom-button\">\n                RESTART\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}