{"ast":null,"code":"var _jsxFileName = \"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js\",\n    _s = $RefreshSig$();\n\nimport \"./TypingArea.css\"; // variables\n\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect } from \"react\";\nimport { timerKeydown, registerKeydown } from \"../assets/typing\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TypingArea(_ref) {\n  _s();\n\n  let {\n    lessonNum\n  } = _ref;\n  // constants\n  const NUM_WQRDS = 40; // creating the text area\n\n  function rmStringDuplicates(str) {\n    return Array.from(new Set(str)).join(\"\");\n  }\n\n  let chars = charBank[lessonNum];\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function cText(chars, numWords) {\n    let lst = [];\n    let i, j, text;\n\n    for (j = 0; j < numWords; j++) {\n      text = \"\";\n\n      for (i = 0; i < randomInt(3, 5); i++) {\n        let upperCase = Math.random() > 0.5 ? 1 : 0;\n        let newChar = chars.charAt(Math.floor(Math.random() * chars.length));\n        text += upperCase ? newChar.toUpperCase() : newChar;\n      }\n\n      lst.push(text);\n    }\n\n    return lst.join(\" \");\n  }\n\n  let text = cText(chars, NUM_WQRDS); // tracking typing\n\n  let [toType, setToType] = useState(text.split(\"\"));\n  let [timer, setTimer] = useState({\n    startTime: 0,\n    endTime: 0,\n    timeElapsed: 0\n  });\n\n  function timerEvent(e) {\n    setTimer(timerKeydown(e, timer));\n  }\n\n  function progressEvent(e) {\n    let newText = registerKeydown(e, toType);\n\n    if (newText.length == toType.length) {\n      console.log(\"ogod\");\n    } else {\n      console.log('a');\n    }\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", timerEvent);\n    window.addEventListener(\"keydown\", progressEvent); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", timerEvent);\n      window.removeEventListener(\"keydown\", progressEvent);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing\",\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 12\n  }, this);\n}\n\n_s(TypingArea, \"vpOzR5isa2rytXrvZo26ojIQPlM=\");\n\n_c = TypingArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingArea\");","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js"],"names":["charBank","useState","useEffect","timerKeydown","registerKeydown","TypingArea","lessonNum","NUM_WQRDS","rmStringDuplicates","str","Array","from","Set","join","chars","randomInt","min","max","Math","floor","random","cText","numWords","lst","i","j","text","upperCase","newChar","charAt","length","toUpperCase","push","toType","setToType","split","timer","setTimer","startTime","endTime","timeElapsed","timerEvent","e","progressEvent","newText","console","log","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import \"./TypingArea.css\";\n\n// variables\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect } from \"react\";\nimport { timerKeydown, registerKeydown } from \"../assets/typing\";\n\nexport default function TypingArea({ lessonNum }) {\n    // constants\n    const NUM_WQRDS = 40;\n\n    // creating the text area\n    function rmStringDuplicates(str) {\n        return Array.from(new Set(str)).join(\"\");\n    }\n    let chars = charBank[lessonNum];\n    function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    function cText(chars, numWords) {\n        let lst = [];\n        let i, j, text;\n        for (j = 0; j < numWords; j++) {\n            text = \"\";\n            for (i = 0; i < randomInt(3, 5); i++) {\n                let upperCase = Math.random() > 0.5 ? 1 : 0;\n                let newChar = chars.charAt(\n                    Math.floor(Math.random() * chars.length)\n                );\n\n                text += upperCase ? newChar.toUpperCase() : newChar;\n            }\n            lst.push(text);\n        }\n\n        return lst.join(\" \");\n    }\n    let text = cText(chars, NUM_WQRDS);\n\n    // tracking typing\n    let [toType, setToType] = useState(text.split(\"\"));\n    let [timer, setTimer] = useState({\n        startTime: 0,\n        endTime: 0,\n        timeElapsed: 0,\n    });\n\n    function timerEvent(e) {\n        setTimer(timerKeydown(e, timer));\n    }\n\n    function progressEvent(e) {\n        let newText = registerKeydown(e, toType);\n        if (newText.length == toType.length ) {\n            console.log(\"ogod\");\n        }\n        else {\n            console.log('a')\n        }\n    }\n\n    // Add event listeners\n    useEffect(() => {\n        window.addEventListener(\"keydown\", timerEvent);\n        window.addEventListener(\"keydown\", progressEvent);\n\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", timerEvent);\n            window.removeEventListener(\"keydown\", progressEvent);\n        };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return <div className=\"typing\">{text}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}