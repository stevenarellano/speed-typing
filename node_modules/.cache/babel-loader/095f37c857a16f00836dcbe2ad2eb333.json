{"ast":null,"code":"class TypingInfo {\n  constructor(toType, timer) {\n    let typed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    this.toType = toType;\n    this.timer = timer;\n    this.typed = typed;\n    this.charsRight = 0;\n  }\n\n  _getNextToType() {\n    let nextToType;\n\n    if (this.toType.length > 0) {\n      nextToType = toType.substring(1);\n    } else {\n      nextToType = \"\";\n    }\n\n    return nextToType;\n  }\n\n  _timerControl(toType) {\n    if (this.typed.length == 0) {\n      this.timer.startTimer();\n    } else if (toType.length == 0) {\n      this.timer.endTimer();\n    }\n  }\n\n  RegisterKeydown(e) {\n    let firstChar = this.toType.charAt(0);\n\n    if (e.key === firstChar) {\n      let nextToType = this._getNextToType();\n\n      this._timerControl(nextToType);\n\n      this.toType = nextToType;\n      this.timer = timer;\n      this.typed = this.typed + firstChar;\n    }\n  }\n\n}\n\nclass Timer {\n  constructor() {\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeElapsed = 0;\n  }\n\n  startTimer() {\n    this.startTime = new Date();\n  }\n\n  _secondsElapsed(time1, time2) {\n    return Math.abs(time1 - time2) / 1000;\n  }\n\n  endTimer() {\n    this.endTime = new Date();\n    this.timeElapsed = this._secondsElapsed(newStopwatch.startTime, newStopwatch.endTime);\n  }\n\n}\n\nconst noInputKeys = [\"Shift\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"Control\", \"Alt\", \"Meta\", \"Escape\", \"CapsLock\", \"Backspace\"];\n\nfunction includesBadKey(e) {\n  if (noInputKeys.includes(e.key)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/assets/typing.js"],"names":["TypingInfo","constructor","toType","timer","typed","charsRight","_getNextToType","nextToType","length","substring","_timerControl","startTimer","endTimer","RegisterKeydown","e","firstChar","charAt","key","Timer","startTime","endTime","timeElapsed","Date","_secondsElapsed","time1","time2","Math","abs","newStopwatch","noInputKeys","includesBadKey","includes"],"mappings":"AAAA,MAAMA,UAAN,CAAiB;AACbC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAA4B;AAAA,QAAZC,KAAY,uEAAJ,EAAI;AACnC,SAAKF,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,QAAIC,UAAJ;;AACA,QAAI,KAAKL,MAAL,CAAYM,MAAZ,GAAqB,CAAzB,EAA4B;AACxBD,MAAAA,UAAU,GAAGL,MAAM,CAACO,SAAP,CAAiB,CAAjB,CAAb;AACH,KAFD,MAEO;AACHF,MAAAA,UAAU,GAAG,EAAb;AACH;;AACD,WAAOA,UAAP;AACH;;AAEDG,EAAAA,aAAa,CAACR,MAAD,EAAS;AAClB,QAAI,KAAKE,KAAL,CAAWI,MAAX,IAAqB,CAAzB,EAA4B;AACxB,WAAKL,KAAL,CAAWQ,UAAX;AACH,KAFD,MAEO,IAAIT,MAAM,CAACM,MAAP,IAAiB,CAArB,EAAwB;AAC3B,WAAKL,KAAL,CAAWS,QAAX;AACH;AACJ;;AAEDC,EAAAA,eAAe,CAACC,CAAD,EAAI;AACf,QAAIC,SAAS,GAAG,KAAKb,MAAL,CAAYc,MAAZ,CAAmB,CAAnB,CAAhB;;AACA,QAAIF,CAAC,CAACG,GAAF,KAAUF,SAAd,EAAyB;AACrB,UAAIR,UAAU,GAAG,KAAKD,cAAL,EAAjB;;AACA,WAAKI,aAAL,CAAmBH,UAAnB;;AACA,WAAKL,MAAL,GAAcK,UAAd;AACA,WAAKJ,KAAL,GAAaA,KAAb;AACA,WAAKC,KAAL,GAAa,KAAKA,KAAL,GAAaW,SAA1B;AACH;AACJ;;AAnCY;;AAsCjB,MAAMG,KAAN,CAAY;AACRjB,EAAAA,WAAW,GAAG;AACV,SAAKkB,SAAL,GAAiB,CAAjB;AACA,SAAKC,OAAL,GAAe,CAAf;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACH;;AAEDV,EAAAA,UAAU,GAAG;AACT,SAAKQ,SAAL,GAAiB,IAAIG,IAAJ,EAAjB;AACH;;AAEDC,EAAAA,eAAe,CAACC,KAAD,EAAQC,KAAR,EAAe;AAC1B,WAAOC,IAAI,CAACC,GAAL,CAASH,KAAK,GAAGC,KAAjB,IAA0B,IAAjC;AACH;;AAEDb,EAAAA,QAAQ,GAAG;AACP,SAAKQ,OAAL,GAAe,IAAIE,IAAJ,EAAf;AACA,SAAKD,WAAL,GAAmB,KAAKE,eAAL,CACfK,YAAY,CAACT,SADE,EAEfS,YAAY,CAACR,OAFE,CAAnB;AAIH;;AArBO;;AAwBZ,MAAMS,WAAW,GAAG,CAChB,OADgB,EAEhB,WAFgB,EAGhB,SAHgB,EAIhB,WAJgB,EAKhB,YALgB,EAMhB,SANgB,EAOhB,KAPgB,EAQhB,MARgB,EAShB,QATgB,EAUhB,UAVgB,EAWhB,WAXgB,CAApB;;AAcA,SAASC,cAAT,CAAwBhB,CAAxB,EAA2B;AACvB,MAAIe,WAAW,CAACE,QAAZ,CAAqBjB,CAAC,CAACG,GAAvB,CAAJ,EAAiC;AAC7B,WAAO,IAAP;AACH;;AACD,SAAO,KAAP;AACH;;AAED,SAASjB,UAAT,EAAqBkB,KAArB,EAA4BY,cAA5B","sourcesContent":["class TypingInfo {\n    constructor(toType, timer, typed = \"\") {\n        this.toType = toType;\n        this.timer = timer;\n        this.typed = typed;\n        this.charsRight = 0;\n    }\n\n    _getNextToType() {\n        let nextToType;\n        if (this.toType.length > 0) {\n            nextToType = toType.substring(1);\n        } else {\n            nextToType = \"\";\n        }\n        return nextToType;\n    }\n\n    _timerControl(toType) {\n        if (this.typed.length == 0) {\n            this.timer.startTimer();\n        } else if (toType.length == 0) {\n            this.timer.endTimer();\n        }\n    }\n\n    RegisterKeydown(e) {\n        let firstChar = this.toType.charAt(0);\n        if (e.key === firstChar) {\n            let nextToType = this._getNextToType();\n            this._timerControl(nextToType);\n            this.toType = nextToType;\n            this.timer = timer;\n            this.typed = this.typed + firstChar;\n        }\n    }\n}\n\nclass Timer {\n    constructor() {\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeElapsed = 0;\n    }\n\n    startTimer() {\n        this.startTime = new Date();\n    }\n\n    _secondsElapsed(time1, time2) {\n        return Math.abs(time1 - time2) / 1000;\n    }\n\n    endTimer() {\n        this.endTime = new Date();\n        this.timeElapsed = this._secondsElapsed(\n            newStopwatch.startTime,\n            newStopwatch.endTime\n        );\n    }\n}\n\nconst noInputKeys = [\n    \"Shift\",\n    \"ArrowDown\",\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"Control\",\n    \"Alt\",\n    \"Meta\",\n    \"Escape\",\n    \"CapsLock\",\n    \"Backspace\",\n];\n\nfunction includesBadKey(e) {\n    if (noInputKeys.includes(e.key)) {\n        return true;\n    }\n    return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };\n"]},"metadata":{},"sourceType":"module"}