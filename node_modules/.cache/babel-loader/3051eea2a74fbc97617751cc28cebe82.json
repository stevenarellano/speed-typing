{"ast":null,"code":"class TypingInfo {\n  constructor(toType, timer) {\n    this.toType = toType;\n    this.timer = timer;\n    this.typed = \"\";\n    this.mistakes = 0;\n    this.currentWrong = false;\n  }\n\n  _getNextToType() {\n    let nextToType;\n\n    if (this.toType.length > 0) {\n      nextToType = this.toType.substring(1);\n    } else {\n      nextToType = \"\";\n    }\n\n    this.toType = nextToType;\n    return nextToType;\n  }\n\n  _timerControl(toType) {\n    if (this.typed.length == 0) {\n      this.timer.startTimer();\n    } else if (toType.length == 0) {\n      this.timer.endTimer();\n    }\n  }\n\n  _addWrongClass() {\n    console.log(\"here\");\n    let typingAreaClasses = document.getElementById(\"typing-container\").classList;\n    consolelog(typingAreaClasses);\n\n    if (!typingAreaClasses.contains(\"wrong-keydown\")) {\n      typingAreaClasses += \"wrong-keydown\";\n    }\n  }\n\n  _removeWrongClass() {\n    let typingAreaClasses = document.getElementById(\"typing-container\").classList;\n\n    if (typingAreaClasses.contains(\"wrong-keydown\")) {\n      typingAreaClasses.remove(\"wrong-keydown\");\n    }\n  }\n\n  registerKeydown(e) {\n    let firstChar = this.toType.charAt(0);\n\n    if (e.key === firstChar) {\n      if (this.currentWrong) {\n        this.currentWrong = false;\n\n        this._removeWrongClass();\n      }\n\n      let nextToType = this._getNextToType();\n\n      this._timerControl(nextToType);\n\n      this.typed = this.typed + firstChar;\n    } else {\n      this.mistakes++;\n      this.currentWrong = true;\n\n      this._addWrongClass();\n    }\n  }\n\n}\n\nclass Timer {\n  constructor() {\n    this.startTime = 0;\n    this.endTime = 0;\n    this.timeElapsed = 0;\n  }\n\n  startTimer() {\n    this.startTime = new Date();\n  }\n\n  _secondsElapsed(time1, time2) {\n    return Math.abs(time1 - time2) / 1000;\n  }\n\n  endTimer() {\n    this.endTime = new Date();\n    this.timeElapsed = this._secondsElapsed(this.startTime, this.endTime);\n  }\n\n}\n\nconst noInputKeys = [\"Shift\", \"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"Control\", \"Alt\", \"Meta\", \"Escape\", \"CapsLock\", \"Backspace\"];\n\nfunction includesBadKey(e) {\n  if (noInputKeys.includes(e.key)) {\n    return true;\n  }\n\n  return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/assets/typing.js"],"names":["TypingInfo","constructor","toType","timer","typed","mistakes","currentWrong","_getNextToType","nextToType","length","substring","_timerControl","startTimer","endTimer","_addWrongClass","console","log","typingAreaClasses","document","getElementById","classList","consolelog","contains","_removeWrongClass","remove","registerKeydown","e","firstChar","charAt","key","Timer","startTime","endTime","timeElapsed","Date","_secondsElapsed","time1","time2","Math","abs","noInputKeys","includesBadKey","includes"],"mappings":"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","sourcesContent":["class TypingInfo {\n    constructor(toType, timer) {\n        this.toType = toType;\n        this.timer = timer;\n        this.typed = \"\";\n        this.mistakes = 0;\n        this.currentWrong = false;\n    }\n\n    _getNextToType() {\n        let nextToType;\n        if (this.toType.length > 0) {\n            nextToType = this.toType.substring(1);\n        } else {\n            nextToType = \"\";\n        }\n        this.toType = nextToType;\n        return nextToType;\n    }\n\n    _timerControl(toType) {\n        if (this.typed.length == 0) {\n            this.timer.startTimer();\n        } else if (toType.length == 0) {\n            this.timer.endTimer();\n        }\n    }\n\n    _addWrongClass() {\n        console.log(\"here\");\n        let typingAreaClasses =\n            document.getElementById(\"typing-container\").classList;\n        consolelog(typingAreaClasses);\n        if (!typingAreaClasses.contains(\"wrong-keydown\")) {\n            typingAreaClasses += \"wrong-keydown\";\n        }\n    }\n\n    _removeWrongClass() {\n        let typingAreaClasses =\n            document.getElementById(\"typing-container\").classList;\n        if (typingAreaClasses.contains(\"wrong-keydown\")) {\n            typingAreaClasses.remove(\"wrong-keydown\");\n        }\n    }\n\n    registerKeydown(e) {\n        let firstChar = this.toType.charAt(0);\n        if (e.key === firstChar) {\n            if (this.currentWrong) {\n                this.currentWrong = false;\n                this._removeWrongClass();\n            }\n            let nextToType = this._getNextToType();\n            this._timerControl(nextToType);\n\n            this.typed = this.typed + firstChar;\n        } else {\n            this.mistakes++;\n            this.currentWrong = true;\n            this._addWrongClass();\n        }\n    }\n}\n\nclass Timer {\n    constructor() {\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeElapsed = 0;\n    }\n\n    startTimer() {\n        this.startTime = new Date();\n    }\n\n    _secondsElapsed(time1, time2) {\n        return Math.abs(time1 - time2) / 1000;\n    }\n\n    endTimer() {\n        this.endTime = new Date();\n        this.timeElapsed = this._secondsElapsed(this.startTime, this.endTime);\n    }\n}\n\nconst noInputKeys = [\n    \"Shift\",\n    \"ArrowDown\",\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"Control\",\n    \"Alt\",\n    \"Meta\",\n    \"Escape\",\n    \"CapsLock\",\n    \"Backspace\",\n];\n\nfunction includesBadKey(e) {\n    if (noInputKeys.includes(e.key)) {\n        return true;\n    }\n    return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };\n"]},"metadata":{},"sourceType":"module"}