{"ast":null,"code":"var _jsxFileName = \"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js\";\nimport \"./TypingArea.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TypingArea() {\n  console.log(\"text\");\n\n  function rmStringDuplicates(str) {\n    return Array.from(new Set(str)).join(\"\");\n  }\n\n  let charBank;\n  charBank = {\n    1: \"asdf\",\n    2: \"jkl;\",\n    3: charBank[1] + charBank[2],\n    4: charBank[3] + \"gh\",\n    5: charBank[4] + \"'\",\n    6: charBank[5] + ':\"',\n    7: charBank[6] + \"qwert\",\n    8: charBank[7] + \"yuiop\",\n    9: charBank[8] + \"zxcvb\",\n    10: charBank[9] + \"nm,.?\",\n    11: charBank[10] + \"12345\",\n    12: charBank[11] + \"67890\",\n    13: charBank[12] + \"!@#$%^&*()_+-=\",\n    14: charBank[13] + \"<>/{}|[]\\\\\"\n  };\n  let chars = charBank[1];\n\n  function randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  function cText(chars, numWords) {\n    let lst = [];\n    console.log(\"helo\");\n    let i, j, text;\n\n    for (j = 0; j < numWords; j++) {\n      text = \"\";\n\n      for (i = 0; i < randomInt(3, 5); i++) {\n        let upperCase = Math.random();\n        let newChar = chars.charAt(Math.floor(Math.random() * chars.length));\n        text += upperCase ? newChar.toUpperCase : newChar;\n      }\n\n      lst.push(text);\n    }\n\n    return lst.join(\" \");\n  }\n\n  let text = cText(chars, 40);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing\",\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n}\n_c = TypingArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"TypingArea\");","map":{"version":3,"sources":["/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/speed-typing/src/components/TypingArea.js"],"names":["TypingArea","console","log","rmStringDuplicates","str","Array","from","Set","join","charBank","chars","randomInt","min","max","Math","floor","random","cText","numWords","lst","i","j","text","upperCase","newChar","charAt","length","toUpperCase","push"],"mappings":";AAAA,OAAO,kBAAP;;AAEA,eAAe,SAASA,UAAT,GAAsB;AACjCC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AAEA,WAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAC7B,WAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQH,GAAR,CAAX,EAAyBI,IAAzB,CAA8B,EAA9B,CAAP;AACH;;AAED,MAAIC,QAAJ;AACAA,EAAAA,QAAQ,GAAG;AACP,OAAG,MADI;AAEP,OAAG,MAFI;AAGP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAHlB;AAIP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAc,IAJV;AAKP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAc,GALV;AAMP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAc,IANV;AAOP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAc,OAPV;AAQP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAc,OARV;AASP,OAAGA,QAAQ,CAAC,CAAD,CAAR,GAAc,OATV;AAUP,QAAIA,QAAQ,CAAC,CAAD,CAAR,GAAc,OAVX;AAWP,QAAIA,QAAQ,CAAC,EAAD,CAAR,GAAe,OAXZ;AAYP,QAAIA,QAAQ,CAAC,EAAD,CAAR,GAAe,OAZZ;AAaP,QAAIA,QAAQ,CAAC,EAAD,CAAR,GAAe,gBAbZ;AAcP,QAAIA,QAAQ,CAAC,EAAD,CAAR,GAAe;AAdZ,GAAX;AAgBA,MAAIC,KAAK,GAAGD,QAAQ,CAAC,CAAD,CAApB;;AAEA,WAASE,SAAT,CAAmBC,GAAnB,EAAwBC,GAAxB,EAA6B;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACH;;AAED,WAASK,KAAT,CAAeP,KAAf,EAAsBQ,QAAtB,EAAgC;AAC5B,QAAIC,GAAG,GAAG,EAAV;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,QAAIkB,CAAJ,EAAOC,CAAP,EAAUC,IAAV;;AACA,SAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGH,QAAhB,EAA0BG,CAAC,EAA3B,EAA+B;AAC3BC,MAAAA,IAAI,GAAG,EAAP;;AACA,WAAKF,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGT,SAAS,CAAC,CAAD,EAAI,CAAJ,CAAzB,EAAiCS,CAAC,EAAlC,EAAsC;AAClC,YAAIG,SAAS,GAAGT,IAAI,CAACE,MAAL,EAAhB;AACA,YAAIQ,OAAO,GAAGd,KAAK,CAACe,MAAN,CACVX,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,KAAK,CAACgB,MAAjC,CADU,CAAd;AAGAJ,QAAAA,IAAI,IAAIC,SAAS,GAAGC,OAAO,CAACG,WAAX,GAAyBH,OAA1C;AACH;;AACDL,MAAAA,GAAG,CAACS,IAAJ,CAASN,IAAT;AACH;;AAED,WAAOH,GAAG,CAACX,IAAJ,CAAS,GAAT,CAAP;AACH;;AAED,MAAIc,IAAI,GAAGL,KAAK,CAACP,KAAD,EAAQ,EAAR,CAAhB;AACA,sBAAO;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,cAAyBY;AAAzB;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;KAnDuBtB,U","sourcesContent":["import \"./TypingArea.css\";\n\nexport default function TypingArea() {\n    console.log(\"text\");\n\n    function rmStringDuplicates(str) {\n        return Array.from(new Set(str)).join(\"\");\n    }\n\n    let charBank;\n    charBank = {\n        1: \"asdf\",\n        2: \"jkl;\",\n        3: charBank[1] + charBank[2],\n        4: charBank[3] + \"gh\",\n        5: charBank[4] + \"'\",\n        6: charBank[5] + ':\"',\n        7: charBank[6] + \"qwert\",\n        8: charBank[7] + \"yuiop\",\n        9: charBank[8] + \"zxcvb\",\n        10: charBank[9] + \"nm,.?\",\n        11: charBank[10] + \"12345\",\n        12: charBank[11] + \"67890\",\n        13: charBank[12] + \"!@#$%^&*()_+-=\",\n        14: charBank[13] + \"<>/{}|[]\\\\\",\n    };\n    let chars = charBank[1];\n\n    function randomInt(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    function cText(chars, numWords) {\n        let lst = [];\n        console.log(\"helo\");\n        let i, j, text;\n        for (j = 0; j < numWords; j++) {\n            text = \"\";\n            for (i = 0; i < randomInt(3, 5); i++) {\n                let upperCase = Math.random();\n                let newChar = chars.charAt(\n                    Math.floor(Math.random() * chars.length)\n                );\n                text += upperCase ? newChar.toUpperCase : newChar;\n            }\n            lst.push(text);\n        }\n\n        return lst.join(\" \");\n    }\n\n    let text = cText(chars, 40);\n    return <div className=\"typing\">{text}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}