[{"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/index.js":"1","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/reportWebVitals.js":"2","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/App.js":"3","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/classManipulation.js":"4","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/Start.js":"5","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/Guide.js":"6","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/TypingArea.js":"7","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/charBank.js":"8","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/Options.js":"9","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/typing.js":"10"},{"size":500,"mtime":1640204053812,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1640204053813,"results":"13","hashOfConfig":"12"},{"size":1386,"mtime":1641997187799,"results":"14","hashOfConfig":"12"},{"size":281,"mtime":1641267624423,"results":"15","hashOfConfig":"12"},{"size":377,"mtime":1641267614314,"results":"16","hashOfConfig":"12"},{"size":358,"mtime":1641419105118,"results":"17","hashOfConfig":"12"},{"size":3179,"mtime":1641996718661,"results":"18","hashOfConfig":"12"},{"size":519,"mtime":1641260181381,"results":"19","hashOfConfig":"12"},{"size":1883,"mtime":1641910845222,"results":"20","hashOfConfig":"12"},{"size":3657,"mtime":1641997161137,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"v4y785",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/index.js",[],["48","49"],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/reportWebVitals.js",[],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/App.js",["50","51","52","53","54"],"// component\nimport TypingArea from \"./components/TypingArea\";\nimport Options from \"./components/Options\";\nimport Start from \"./components/Start\";\nimport Guide from \"./components/Guide\";\n\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nimport { removeActive, addActive } from \"./assets/classManipulation\";\nimport { cText, NUM_WQRDS, TypingInfo, Timer } from \"./assets/typing\";\nimport \"./App.css\";\nimport { charBank } from \"./assets/charBank\";\n\nfunction App() {\n    let [lessonNum, setLessonNum] = useState(1);\n    let [restartToggle, setRestartToggle] = useState(0);\n    let lessonText = cText(charBank[lessonNum], NUM_WQRDS);\n    let [typingInfo, setTypingInfo] = useState(\n        new TypingInfo(lessonText, new Timer())\n    );\n    useLayoutEffect(() => {\n        typingInfo.removeWrongClass();\n        setTypingInfo(new TypingInfo(lessonText, new Timer()));\n    }, [lessonNum, restartToggle]);\n\n    return (\n        <div className=\"App\">\n            <Options id=\"Options\" lessonState={[lessonNum, setLessonNum]} />\n            <Guide id=\"Guide\" lessonNum={lessonNum} />\n            <TypingArea\n                id=\"TypingArea\"\n                typingInfoState={[typingInfo, setTypingInfo]}\n                lessonState={[lessonNum, setLessonNum]}\n                restartState={[restartToggle, setRestartToggle]}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/classManipulation.js",[],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/Start.js",[],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/Guide.js",[],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/TypingArea.js",["55","56","57","58","59","60","61"],"import \"./TypingArea.css\";\n\n// variables\nimport { charBank } from \"../assets/charBank\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport {\n    TypingInfo,\n    Timer,\n    includesBadKey,\n    returnNewTypingInfo,\n} from \"../assets/typing\";\nimport { NUM_WQRDS } from \"../assets/typing\";\n\nexport default function TypingArea({\n    lessonState,\n    typingInfoState,\n    restartState,\n}) {\n    // imported states\n    let [lessonNum, setLessonNum] = lessonState;\n    let [typingInfo, setTypingInfo] = typingInfoState;\n    let [restartToggle, setRestartToggle] = restartState;\n\n    //  ending control\n    let [finished, setFinished] = useState(false);\n    function triggerEnd() {\n        setFinished(true);\n    }\n    let typingBody = finished ? (\n        <>\n            <div className=\"title\"> STATS</div>\n            <div className=\"stats\">\n                Time Elapsed: {typingInfo.timer.timeElapsed}s<br />\n                MISTAKES MADE: {typingInfo.mistakes}\n                <br />\n                WPM:{\" \"}\n                {Math.round(NUM_WQRDS / (typingInfo.timer.timeElapsed / 60))}\n                <br />\n                ACCURACY:{\" \"}\n                {Math.round(\n                    Math.max(\n                        (typingInfo.typed.length - typingInfo.mistakes) /\n                            typingInfo.typed.length,\n                        0.01\n                    ) * 100\n                )}\n                %\n            </div>\n        </>\n    ) : (\n        <>\n            <div className=\"title\"> Please Type The Letters Below</div>\n            <div id=\"typing-container\" className=\"\">\n                <div className=\"typed typing-content\">{typingInfo.typed}</div>\n                <div className=\"toType  typing-content\">\n                    {typingInfo.toType}\n                </div>\n            </div>\n        </>\n    );\n\n    // restarting the texting\n    function restartTyping() {\n        setRestartToggle(!restartToggle);\n        setFinished(0);\n    }\n\n    function keyDownE(e) {\n        console.log(\"hi\");\n    }\n\n    // Add event listeners\n    useLayoutEffect(() => {\n        keyDownE = function (e) {\n            if (includesBadKey(e)) {\n                return;\n            }\n            typingInfo.registerKeydown(e);\n\n            console.log(typingInfo);\n            // create brand new class\n            let newTypingInfo = returnNewTypingInfo(typingInfo);\n            setTypingInfo(newTypingInfo);\n            if (typingInfo.toType.length === 0) {\n                window.removeEventListener(\"keydown\", keyDownE);\n                triggerEnd();\n            }\n        };\n        window.addEventListener(\"keydown\", keyDownE);\n\n        // Remove event listeners on cleanup\n        return () => {\n            window.removeEventListener(\"keydown\", keyDownE);\n        };\n    }, [lessonNum, typingInfo]); // Empty array ensures that effect is only run on mount and unmount\n\n    useLayoutEffect(() => {\n        setFinished(0);\n    }, [lessonNum]);\n    return (\n        <div id=\"lesson-area\">\n            {typingBody}\n            <div onClick={restartTyping} className=\"bottom-button\">\n                RESTART\n            </div>\n        </div>\n    );\n}\n",["62","63"],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/charBank.js",[],"/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/components/Options.js",["64","65"],"import \"./Options.css\";\nimport { FaBars } from \"react-icons/fa\";\n\nexport default function Options({ lessonState, testToggleState }) {\n    // imported states\n    let [currentLessonNum, setLessonNum] = lessonState;\n\n    function generateLesson(e) {\n        let newLessonNum = e.target.id.split(\"n\")[1];\n        if (newLessonNum == currentLessonNum) {\n            return;\n        }\n        setLessonNum(newLessonNum);\n    }\n\n    function buildLessonList(numOfLessons) {\n        let lessonList = [...Array(numOfLessons).keys()];\n        return lessonList.map((val) => {\n            let lessonNum = val + 1;\n            let classes =\n                currentLessonNum == lessonNum\n                    ? \"lesson-item active-lesson\"\n                    : \"lesson-item\";\n            return (\n                <div\n                    id={\"lesson\" + String(lessonNum)}\n                    className={classes}\n                    key={lessonNum}\n                    onClick={(e) => generateLesson(e)}\n                >\n                    Lesson {lessonNum}\n                </div>\n            );\n        });\n    }\n\n    // css tings\n    function toggleLessonMenu() {\n        let optionsMenu = document.getElementById(\"lessons-container\");\n        if (optionsMenu.classList.contains(\"lessons-open\")) {\n            optionsMenu.classList.remove(\"lessons-open\");\n            console.log(optionsMenu.classList);\n        } else {\n            optionsMenu.classList.add(\"lessons-open\");\n            console.log(optionsMenu.classList);\n        }\n    }\n\n    return (\n        <div id=\"option-container\">\n            <div className=\"options-title\">\n                <FaBars className=\"title-bars\" onClick={toggleLessonMenu} />{\" \"}\n                <div className=\"title-text\">SELECT A LESSON</div>\n            </div>\n            <div id=\"lessons-container\">{buildLessonList(14)}</div>\n        </div>\n    );\n}\n","/Users/stevenarellanojr/Desktop/stuff/cs/WebDev/speed-typing/src/assets/typing.js",["66","67","68"],"// constants\nexport const NUM_WQRDS = 40;\n// creating the text area\nfunction rmStringDuplicates(str) {\n    return Array.from(new Set(str)).join(\"\");\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function cText(chars, numWords) {\n    let lst = [];\n    let i, j, text;\n    for (j = 0; j < numWords; j++) {\n        text = \"\";\n        for (i = 0; i < randomInt(3, 5); i++) {\n            let first = !text.length;\n            let upperCase = (Math.random() > 0.80 && first) ? 1 : 0;\n            let newChar = chars.charAt(\n                Math.floor(Math.random() * chars.length)\n            );\n\n            text += upperCase ? newChar.toUpperCase() : newChar;\n        }\n        lst.push(text);\n    }\n\n    return lst.join(\" \");\n}\nclass TypingInfo {\n    constructor(toType, timer) {\n        this.toType = toType;\n        this.timer = timer;\n        this.typed = \"\";\n        this.mistakes = 0;\n        this.currentWrong = false;\n    }\n\n    _getNextToType() {\n        let nextToType;\n        if (this.toType.length > 0) {\n            nextToType = this.toType.substring(1);\n        } else {\n            nextToType = \"\";\n        }\n        this.toType = nextToType;\n        return nextToType;\n    }\n\n    _timerControl(toType) {\n        if (this.typed.length == 0) {\n            this.timer.startTimer();\n        } else if (toType.length == 0) {\n            this.timer.endTimer();\n        }\n    }\n\n    _addWrongClass() {\n        let typingAreaClasses =\n            document.getElementById(\"typing-container\").classList;\n        if (!typingAreaClasses.contains(\"wrong-keydown\")) {\n            typingAreaClasses.add(\"wrong-keydown\");\n            console.log(typingAreaClasses);\n        }\n    }\n\n    removeWrongClass() {\n        let typingAreaClasses =\n            document.getElementById(\"typing-container\").classList;\n        if (typingAreaClasses.contains(\"wrong-keydown\")) {\n            typingAreaClasses.remove(\"wrong-keydown\");\n        }\n    }\n\n    registerKeydown(e) {\n        let firstChar = this.toType.charAt(0);\n        if (e.key === firstChar) {\n            if (this.currentWrong) {\n                this.currentWrong = false;\n                this.removeWrongClass();\n            }\n            let nextToType = this._getNextToType();\n            this._timerControl(nextToType);\n\n            this.typed = this.typed + firstChar;\n        } else {\n            this.mistakes++;\n            this.currentWrong = true;\n            this._addWrongClass();\n        }\n    }\n}\n\nexport function returnNewTypingInfo(oldTypingInfo) {\n    let newTypingInfo = new TypingInfo(oldTypingInfo.toType, new Timer());\n    newTypingInfo.typed = oldTypingInfo.typed;\n    newTypingInfo.mistakes = oldTypingInfo.mistakes;\n    newTypingInfo.currentWrong = oldTypingInfo.currentWrong;\n    newTypingInfo.timer = oldTypingInfo.timer;\n    return newTypingInfo;\n}\n\nclass Timer {\n    constructor() {\n        this.startTime = 0;\n        this.endTime = 0;\n        this.timeElapsed = 0;\n    }\n\n    startTimer() {\n        this.startTime = new Date();\n    }\n\n    _secondsElapsed(time1, time2) {\n        return Math.abs(time1 - time2) / 1000;\n    }\n\n    endTimer() {\n        this.endTime = new Date();\n        this.timeElapsed = this._secondsElapsed(this.startTime, this.endTime);\n    }\n}\n\nconst noInputKeys = [\n    \"Shift\",\n    \"ArrowDown\",\n    \"ArrowUp\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"Control\",\n    \"Alt\",\n    \"Meta\",\n    \"Escape\",\n    \"CapsLock\",\n    \"Backspace\",\n];\n\nfunction includesBadKey(e) {\n    if (noInputKeys.includes(e.key)) {\n        return true;\n    }\n    return false;\n}\n\nexport { TypingInfo, Timer, includesBadKey };\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":13},{"ruleId":"73","severity":1,"message":"77","line":7,"column":10,"nodeType":"75","messageId":"76","endLine":7,"endColumn":19},{"ruleId":"73","severity":1,"message":"78","line":8,"column":10,"nodeType":"75","messageId":"76","endLine":8,"endColumn":22},{"ruleId":"73","severity":1,"message":"79","line":8,"column":24,"nodeType":"75","messageId":"76","endLine":8,"endColumn":33},{"ruleId":"80","severity":1,"message":"81","line":23,"column":8,"nodeType":"82","endLine":23,"endColumn":34,"suggestions":"83"},{"ruleId":"73","severity":1,"message":"84","line":4,"column":10,"nodeType":"75","messageId":"76","endLine":4,"endColumn":18},{"ruleId":"73","severity":1,"message":"77","line":5,"column":20,"nodeType":"75","messageId":"76","endLine":5,"endColumn":29},{"ruleId":"73","severity":1,"message":"85","line":7,"column":5,"nodeType":"75","messageId":"76","endLine":7,"endColumn":15},{"ruleId":"73","severity":1,"message":"86","line":8,"column":5,"nodeType":"75","messageId":"76","endLine":8,"endColumn":10},{"ruleId":"73","severity":1,"message":"87","line":20,"column":21,"nodeType":"75","messageId":"76","endLine":20,"endColumn":33},{"ruleId":"88","severity":1,"message":"89","line":74,"column":9,"nodeType":"75","messageId":"90","endLine":74,"endColumn":17},{"ruleId":"80","severity":1,"message":"91","line":74,"column":20,"nodeType":"92","endLine":88,"endColumn":10},{"ruleId":"69","replacedBy":"93"},{"ruleId":"71","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":10,"column":26,"nodeType":"97","messageId":"98","endLine":10,"endColumn":28},{"ruleId":"95","severity":1,"message":"96","line":21,"column":34,"nodeType":"97","messageId":"98","endLine":21,"endColumn":36},{"ruleId":"73","severity":1,"message":"99","line":4,"column":10,"nodeType":"75","messageId":"76","endLine":4,"endColumn":28},{"ruleId":"95","severity":1,"message":"96","line":52,"column":31,"nodeType":"97","messageId":"98","endLine":52,"endColumn":33},{"ruleId":"95","severity":1,"message":"96","line":54,"column":34,"nodeType":"97","messageId":"98","endLine":54,"endColumn":36},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'Start' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'removeActive' is defined but never used.","'addActive' is defined but never used.","react-hooks/exhaustive-deps","React Hook useLayoutEffect has missing dependencies: 'lessonText' and 'typingInfo'. Either include them or remove the dependency array.","ArrayExpression",["102"],"'charBank' is defined but never used.","'TypingInfo' is defined but never used.","'Timer' is defined but never used.","'setLessonNum' is assigned a value but never used.","no-func-assign","'keyDownE' is a function.","isAFunction","Assignments to the 'keyDownE' variable from inside React Hook useLayoutEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useLayoutEffect.","FunctionExpression",["100"],["101"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'rmStringDuplicates' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [lessonNum, lessonText, restartToggle, typingInfo]",{"range":"105","text":"106"},[882,908],"[lessonNum, lessonText, restartToggle, typingInfo]"]